{"ast":null,"code":"var _jsxFileName = \"/Users/sreedhar.palampalli/Desktop/Projects/Job-Portal/frontend/src/components/CompanySignup.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompanySignup() {\n  _s();\n  const [companyName, setCompanyName] = useState(\"\");\n  let industryTypeOptions = [];\n  const [companyWebsiteURL, setCompanyWebsiteURL] = useState(\"\");\n  let companySizeOptions = [];\n  const [yearOfEstablishment, setYearofEstablishment] = useState(\"\");\n  const [companyDescription, setCompanyDescription] = useState(\"\");\n  useEffect(() => {\n    const getSelectOptions = async () => {\n      let options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      };\n      const response = await fetch('http://localhost:8080/api/insert-user', options);\n      const responseText = await response.json();\n      if (response.status === 201) {\n        if (responseText.status === \"UserWithSameEmailFound\") {\n          alert('There is an existing user with same email, please use different email');\n          setEmail(\"\");\n          setIsSubmitted(false);\n        } else {\n          alert('Your user has been created you can login with that user now');\n          navigate(\"/signin\");\n        }\n      } else {\n        alert('An error occured could you please try again');\n        window.location.reload();\n      }\n    };\n    getSelectOptions();\n    // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Company signup page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 3\n  }, this);\n}\n_s(CompanySignup, \"u4DyECuDRI0GH5H3XMNMFZQ1aIE=\");\n_c = CompanySignup;\nexport default CompanySignup;\nvar _c;\n$RefreshReg$(_c, \"CompanySignup\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","CompanySignup","_s","companyName","setCompanyName","industryTypeOptions","companyWebsiteURL","setCompanyWebsiteURL","companySizeOptions","yearOfEstablishment","setYearofEstablishment","companyDescription","setCompanyDescription","getSelectOptions","options","method","headers","body","JSON","stringify","email","password","response","fetch","responseText","json","status","alert","setEmail","setIsSubmitted","navigate","window","location","reload","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sreedhar.palampalli/Desktop/Projects/Job-Portal/frontend/src/components/CompanySignup.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction CompanySignup() {\n\n\tconst [companyName, setCompanyName] = useState(\"\");\n\tlet industryTypeOptions = [];\n\tconst [companyWebsiteURL, setCompanyWebsiteURL] = useState(\"\");\n\tlet companySizeOptions = [];\n\tconst [yearOfEstablishment, setYearofEstablishment] = useState(\"\");\n\tconst [companyDescription, setCompanyDescription] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tconst getSelectOptions = async () => {\n\t\t\tlet options = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\temail: email,\n\t\t\t\t\t\tpassword: password\n\t\t\t\t\t})\n\t\t\t\t};\n\n\t\t\t\tconst response = await fetch('http://localhost:8080/api/insert-user', options);\n\t\t\t\tconst responseText = await response.json();\n\t\t\t\tif(response.status === 201){\n\t\t\t\t\tif(responseText.status === \"UserWithSameEmailFound\"){\n\t\t\t\t\t\talert('There is an existing user with same email, please use different email');\n\t\t\t\t\t\tsetEmail(\"\");\n\t\t\t\t\t\tsetIsSubmitted(false);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\talert('Your user has been created you can login with that user now');\n\t\t\t\t\t\tnavigate(\"/signin\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\talert('An error occured could you please try again');\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tgetSelectOptions();\n\t\t// eslint-disable-next-line\n\t}, []);\n\treturn (\n\n\t\t<div>\n\t\t\t<p>Company signup page</p>\n\t\t</div>\n\n\t);\n\n}\n\nexport default CompanySignup;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EAExB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,IAAIS,mBAAmB,GAAG,EAAE;EAC5B,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9D,IAAIY,kBAAkB,GAAG,EAAE;EAC3B,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAACe,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEhEC,SAAS,CAAC,MAAM;IACf,MAAMgB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAIC,OAAO,GAAG;QACbC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACR,cAAc,EAAE;QACjB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAEA,KAAK;UACZC,QAAQ,EAAEA;QACX,CAAC;MACF,CAAC;MAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAET,OAAO,CAAC;MAC9E,MAAMU,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC1C,IAAGH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAC;QAC1B,IAAGF,YAAY,CAACE,MAAM,KAAK,wBAAwB,EAAC;UACnDC,KAAK,CAAC,uEAAuE,CAAC;UAC9EC,QAAQ,CAAC,EAAE,CAAC;UACZC,cAAc,CAAC,KAAK,CAAC;QACtB,CAAC,MACG;UACHF,KAAK,CAAC,6DAA6D,CAAC;UACpEG,QAAQ,CAAC,SAAS,CAAC;QACpB;MACD,CAAC,MACG;QACHH,KAAK,CAAC,6CAA6C,CAAC;QACpDI,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;MACzB;IACD,CAAC;IAEDpB,gBAAgB,CAAC,CAAC;IACnB;EACD,CAAC,EAAE,EAAE,CAAC;EACN,oBAECb,OAAA;IAAAkC,QAAA,eACClC,OAAA;MAAAkC,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAIR;AAACpC,EAAA,CApDQD,aAAa;AAAAsC,EAAA,GAAbtC,aAAa;AAsDtB,eAAeA,aAAa;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}